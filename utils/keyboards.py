from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List

from models import Skill

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton(text='üñ• –ü—Ä–æ—Ñ–∏–ª—å'),
        KeyboardButton(text='üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç'),
        KeyboardButton(text='üìä –ù–∞–≤—ã–∫–∏'),
        KeyboardButton(text='üõí –ú–∞–≥–∞–∑–∏–Ω')
    )
    return markup

def get_skills_keyboard(skills: List[Skill]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤—ã–∫–æ–≤"""
    markup = InlineKeyboardMarkup()
    
    for skill in skills:
        upgrade_cost = skill.skill_level * 200
        markup.add(InlineKeyboardButton(
            text=f"{skill.skill_name} (–£—Ä–æ–≤–µ–Ω—å {skill.skill_level}) - –£–ª—É—á—à–∏—Ç—å –∑–∞ ${upgrade_cost}",
            callback_data=f"upgrade_{skill.skill_name}"
        ))
    
    return markup

def get_shop_keyboard(server_cost: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text=f"–ö—É–ø–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∑–∞ ${server_cost}", 
        callback_data="buy_server"
    ))
    return markup

def get_incident_solutions_keyboard(incident_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞"""
    import random
    
    markup = InlineKeyboardMarkup()
    solutions = [
        ("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", "solution_restart"),
        ("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏", "solution_logs"),
        ("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", "solution_code"),
        ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "solution_restore"),
        ("–£—Å–∏–ª–∏—Ç—å –∑–∞—â–∏—Ç—É", "solution_security")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ—à–µ–Ω–∏–π
    random.shuffle(solutions)
    for solution_text, callback_data in solutions[:3]:
        markup.add(InlineKeyboardButton(
            text=solution_text, 
            callback_data=f"{callback_data}_{incident_id}"
        ))
    
    return markup
