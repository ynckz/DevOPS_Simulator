from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List

from models import Skill

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [
            KeyboardButton(text='üñ• –ü—Ä–æ—Ñ–∏–ª—å'),
            KeyboardButton(text='üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç')
        ],
        [
            KeyboardButton(text='üìä –ù–∞–≤—ã–∫–∏'),
            KeyboardButton(text='üõí –ú–∞–≥–∞–∑–∏–Ω')
        ],
        [
            KeyboardButton(text='üìã –ó–∞–¥–∞–Ω–∏—è'),
            KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        ],
        [
            KeyboardButton(text='üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'),
            KeyboardButton(text='üìà –†–µ–π—Ç–∏–Ω–≥')
        ]
    ]
    
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    return markup

def get_skills_keyboard(skills: List[Skill]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤—ã–∫–æ–≤"""
    keyboard = []
    
    for skill in skills:
        upgrade_cost = skill.skill_level * 200
        keyboard.append([
            InlineKeyboardButton(
                text=f"{skill.skill_name} (–£—Ä–æ–≤–µ–Ω—å {skill.skill_level}) - –£–ª—É—á—à–∏—Ç—å –∑–∞ ${upgrade_cost}",
                callback_data=f"upgrade_{skill.skill_name}"
            )
        ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup

def get_shop_keyboard(server_cost: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    keyboard = [[
        InlineKeyboardButton(
            text=f"–ö—É–ø–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∑–∞ ${server_cost}", 
            callback_data="buy_server"
        )
    ]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup

def get_incident_solutions_keyboard(incident) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–µ—à–µ–Ω–∏–π –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π –∏–∑ –º–æ–¥–µ–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    solutions = incident.possible_solutions
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    for key, solution in solutions.items():
        keyboard.append([
            InlineKeyboardButton(
                text=solution['name'], 
                callback_data=f"solution_{key}"
            )
        ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup

def get_daily_tasks_keyboard(tasks) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–∏–π"""
    keyboard = []
    
    for task in tasks:
        if task.completed and not task.claimed:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ '{task.description}'", 
                    callback_data=f"claim_task_{task.id}"
                )
            ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è",
            callback_data="refresh_tasks"
        )
    ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup

def get_maintenance_keyboard(repair_cost: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ä–µ–º–æ–Ω—Ç–∞
    repair_options = [
        ("üîß –ü–æ–ª–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "repair_100"),
        ("üîß –°—Ä–µ–¥–Ω–∏–π —Ä–µ–º–æ–Ω—Ç (50%)", "repair_50"),
        ("üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç (25%)", "repair_25")
    ]
    
    for text, callback in repair_options:
        cost = repair_cost
        if callback == "repair_50":
            cost = repair_cost // 2
        elif callback == "repair_25":
            cost = repair_cost // 4
            
        keyboard.append([
            InlineKeyboardButton(
                text=f"{text} - ${cost}", 
                callback_data=callback
            )
        ])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    return markup
