from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from services import get_daily_tasks
from services.daily_service import claim_task_reward
from utils.keyboards import get_daily_tasks_keyboard
from models import SessionMaker

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
tasks_router = Router()

@tasks_router.message(F.text == 'üìã –ó–∞–¥–∞–Ω–∏—è')
async def show_daily_tasks(message: Message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
    with SessionMaker() as session:
        tasks = await get_daily_tasks(user_id)
        
        if not tasks:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏, –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
        tasks_text = "\n\n".join([
            f"üìå *{task.description}*\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {task.current_amount}/{task.target_amount}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: ${task.reward_money}, ‚≠êÔ∏è {task.reward_exp} –æ–ø—ã—Ç–∞\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
            for task in tasks
        ])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        markup = get_daily_tasks_keyboard(tasks)
        
        await message.answer(
            f"üìã *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n"
            f"{tasks_text}\n\n"
            f"–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!",
            parse_mode="Markdown",
            reply_markup=markup
        )

@tasks_router.callback_query(F.data.startswith('claim_task_'))
async def handle_claim_task(call: CallbackQuery):
    user_id = call.from_user.id
    task_id = int(call.data.split('_')[-1])
    
    success, money, exp = await claim_task_reward(user_id, task_id)
    
    if success:
        await call.answer(f"–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${money} –∏ {exp} –æ–ø—ã—Ç–∞!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
        with SessionMaker() as session:
            tasks = await get_daily_tasks(user_id)
            
            if not tasks:
                await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                return
            
            tasks_text = "\n\n".join([
                f"üìå *{task['description']}*\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {task['current_amount']}/{task['target_amount']}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: ${task['reward_money']}, ‚≠êÔ∏è {task['reward_exp']} –æ–ø—ã—Ç–∞\n"
                f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task['completed'] else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
                for task in tasks
            ])
            
            markup = get_daily_tasks_keyboard(tasks)
            
            await call.message.edit_text(
                f"üìã *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è*\n\n"
                f"{tasks_text}\n\n"
                f"–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!",
                parse_mode="Markdown",
                reply_markup=markup
            )
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.") 