import time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from services import generate_incident, solve_incident
from utils.keyboards import get_incident_solutions_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
incident_router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@incident_router.message(Text(text='üö® –ò–Ω—Ü–∏–¥–µ–Ω—Ç'))
async def handle_incident(message: Message):
    user_id = message.from_user.id
    incident = await generate_incident(user_id)
    
    if incident:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã
        user_data[user_id] = {'incident_id': incident.id, 'start_time': time.time()}
        
        stars = "‚≠ê" * incident.difficulty + "‚òÜ" * (5 - incident.difficulty)
        
        await message.answer(
            f"üö® *–ò–ù–¶–ò–î–ï–ù–¢: {incident.name}*\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {incident.description}\n"
            f"üî• *–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {stars}\n"
            f"üí∞ *–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞:* ${incident.reward}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_incident_solutions_keyboard(incident.id)
        )
    else:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@incident_router.callback_query(F.data.startswith('solution_'))
async def handle_solution(call: CallbackQuery):
    user_id = call.from_user.id
    
    if user_id in user_data:
        incident_data = user_data[user_id]
        solution_time = time.time() - incident_data['start_time']
        incident_id = incident_data['incident_id']
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ callback_data
        callback_incident_id = int(call.data.split('_')[-1])
        
        if callback_incident_id == incident_id:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            solution_type = call.data.split('_')[1]
            reward, exp_gain, level_up = await solve_incident(user_id, incident_id, solution_time)
            
            result_message = f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω –∑–∞ {solution_time:.1f} —Å–µ–∫—É–Ω–¥!\n\n" \
                             f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${reward}\n" \
                             f"‚≠êÔ∏è –û–ø—ã—Ç: +{exp_gain}"
            
            if level_up:
                result_message += f"\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!"
                
            await call.message.edit_text(
                text=call.message.text + f"\n\n{result_message}",
                parse_mode="Markdown"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            
            await call.answer()
        else:
            await call.answer("–≠—Ç–æ—Ç –∏–Ω—Ü–∏–¥–µ–Ω—Ç —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
    else:
        await call.answer("–ò–Ω—Ü–∏–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.")
