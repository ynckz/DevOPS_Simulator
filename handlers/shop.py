from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Text

from services import get_player_profile, buy_server, upgrade_skill
from utils.keyboards import get_shop_keyboard, get_skills_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
shop_router = Router()

@shop_router.message(Text(text='üõí –ú–∞–≥–∞–∑–∏–Ω'))
async def show_shop(message: Message):
    user_id = message.from_user.id
    player, _ = await get_player_profile(user_id)
    
    if not player:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    server_cost = player.servers * 1000
    
    await message.answer(
        "üõí *–ú–∞–≥–∞–∑–∏–Ω DevOps-–∏–Ω–∂–µ–Ω–µ—Ä–∞*\n\n"
        f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å {player.servers} —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
        f"–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ 10%.",
        parse_mode="Markdown",
        reply_markup=get_shop_keyboard(server_cost)
    )

@shop_router.callback_query(F.data == "buy_server")
async def handle_buy_server(call: CallbackQuery):
    user_id = call.from_user.id
    
    success, cost = await buy_server(user_id)
    
    if success:
        player, _ = await get_player_profile(user_id)
        
        if not player:
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            return
        
        new_server_cost = player.servers * 1000
        
        await call.message.edit_text(
            "üõí *–ú–∞–≥–∞–∑–∏–Ω DevOps-–∏–Ω–∂–µ–Ω–µ—Ä–∞*\n\n"
            f"‚úÖ –ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∫—É–ø–ª–µ–Ω!\n"
            f"–£ –≤–∞—Å —Å–µ–π—á–∞—Å {player.servers} —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
            f"–ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –Ω–∞ 10%.",
            parse_mode="Markdown",
            reply_markup=get_shop_keyboard(new_server_cost)
        )
        
        await call.answer("–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!")
    else:
        await call.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${cost}")

@shop_router.message(Text(text='üìä –ù–∞–≤—ã–∫–∏'))
async def show_skills(message: Message):
    user_id = message.from_user.id
    player, skills = await get_player_profile(user_id)
    
    if not player:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    await message.answer(
        "üìä *–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ DevOps-–∏–Ω–∂–µ–Ω–µ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=get_skills_keyboard(skills)
    )

@shop_router.callback_query(F.data.startswith('upgrade_'))
async def handle_skill_upgrade(call: CallbackQuery):
    user_id = call.from_user.id
    skill_name = call.data.split('_')[1]
    
    success, new_level, cost = await upgrade_skill(user_id, skill_name)
    
    if success:
        await call.answer(f"–ù–∞–≤—ã–∫ {skill_name} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {new_level}!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞–≤—ã–∫–æ–≤
        player, skills = await get_player_profile(user_id)
        
        if not player:
            await call.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return
        
        await call.message.edit_text(
            "üìä *–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ DevOps-–∏–Ω–∂–µ–Ω–µ—Ä–∞*\n\n"
            "–ù–∞–≤—ã–∫ —É—Å–ø–µ—à–Ω–æ —É–ª—É—á—à–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=get_skills_keyboard(skills)
        )
    else:
        await call.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${cost}")
